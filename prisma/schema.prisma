datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  name                String?
  mobile              String?
  role                UserRole
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  isActive            Boolean               @default(true)
  isEmailVerified     Boolean               @default(false)
  userProfile         UserProfile?
  opportunityUserLink OpportunityUserLink[]
  hrContact           HRContact[]
  Opportunity         Opportunity[]
}

model UserProfile {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @unique
  firstName String?
  lastName  String?
  stream    Stream?     @relation(fields: [streamId], references: [id])
  streamId  String?
  marks10   Int?
  marks12   Int?
  marksGrad Int?
  marksPost Int?
  resume    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  projects  Project[]
  links     Portfolio[]
}

model Project {
  id          String      @id @default(uuid())
  name        String
  url         String
  type        LinkType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   UserProfile @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
}

model Portfolio {
  id          String      @id @default(uuid())
  url         String
  type        LinkType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   UserProfile @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
}

model Opportunity {
  id                    String                  @id @default(uuid())
  name                  String
  description           String
  url                   String
  company               String
  companyImage          String?
  linkedin              String
  jobDesc               String
  deadline              DateTime
  type                  OpportunityType
  isActive              Boolean                 @default(true)
  addedById             String?
  addedBy               User?                   @relation(fields: [addedById], references: [id], onDelete: SetNull)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  opportunityStreamLink OpportunityStreamLink[]
  opportunityUserLink   OpportunityUserLink[]
}

model OpportunityStreamLink {
  id            String      @id @default(uuid())
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  stream        Stream      @relation(fields: [streamId], references: [id])
  streamId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([opportunityId, streamId])
}

model OpportunityUserLink {
  id            String      @id @default(uuid())
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([opportunityId, userId])
}

model Stream {
  id                    String                  @id @default(uuid())
  name                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userProfile           UserProfile[]
  opportunityStreamLink OpportunityStreamLink[]
}

model HRContact {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  mobile    String?
  position  String?
  addedBy   User?    @relation(fields: [addedById], references: [id], onDelete: SetNull)
  addedById String?
  company   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailTemplates {
  id        String   @id @default(uuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SUB_ADMIN
  USER
}

enum OpportunityType {
  INTERNSHIP
  FULL_TIME
  PART_TIME
}

enum LinkType {
  LINKEDIN
  GITHUB
  WEBSITE
  PROJECT
  BEHANCE
  OTHER
}
